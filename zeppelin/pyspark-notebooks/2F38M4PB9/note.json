{
  "paragraphs": [
    {
      "text": "%md\n# Tutorial with Streaming Data\n\nFollowing the official [Streaming Data](https://zeppelin.apache.org/docs/0.5.5-incubating/tutorial/tutorial.html) tutorial.\n\n## Data Refine\n\nSince this tutorial is based on Twitter\u0027s sample tweet stream, you must configure authentication with a Twitter account. To do this, take a look at [Twitter Credential Setup](https://databricks-training.s3.amazonaws.com/realtime-processing-with-spark-streaming.html#twitter-credential-setup). After you get API keys, you should fill out credential related values(`apiKey`, `apiSecret`, `accessToken`, `accessTokenSecret`) with your API keys on following script.\n\nThis will create a RDD of `Tweet` objects and register these stream data as a table:",
      "user": "anonymous",
      "dateUpdated": "2020-02-20 10:55:52.486",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eTutorial with Streaming Data\u003c/h1\u003e\n\u003cp\u003eFollowing the official \u003ca href\u003d\"https://zeppelin.apache.org/docs/0.5.5-incubating/tutorial/tutorial.html\"\u003eStreaming Data\u003c/a\u003e tutorial.\u003c/p\u003e\n\u003ch2\u003eData Refine\u003c/h2\u003e\n\u003cp\u003eSince this tutorial is based on Twitter\u0026rsquo;s sample tweet stream, you must configure authentication with a Twitter account. To do this, take a look at \u003ca href\u003d\"https://databricks-training.s3.amazonaws.com/realtime-processing-with-spark-streaming.html#twitter-credential-setup\"\u003eTwitter Credential Setup\u003c/a\u003e. After you get API keys, you should fill out credential related values(\u003ccode\u003eapiKey\u003c/code\u003e, \u003ccode\u003eapiSecret\u003c/code\u003e, \u003ccode\u003eaccessToken\u003c/code\u003e, \u003ccode\u003eaccessTokenSecret\u003c/code\u003e) with your API keys on following script.\u003c/p\u003e\n\u003cp\u003eThis will create a RDD of \u003ccode\u003eTweet\u003c/code\u003e objects and register these stream data as a table:\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1582196046580_-924775492",
      "id": "20200220-105406_2129803855",
      "dateCreated": "2020-02-20 10:54:06.581",
      "dateStarted": "2020-02-20 10:55:52.490",
      "dateFinished": "2020-02-20 10:55:52.509",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import org.apache.spark.streaming._\nimport org.apache.spark.streaming.twitter._\nimport org.apache.spark.storage.StorageLevel\nimport scala.io.Source\nimport scala.collection.mutable.HashMap\nimport java.io.File\nimport org.apache.log4j.Logger\nimport org.apache.log4j.Level\nimport sys.process.stringSeqToProcess\n\n/** Configures the Oauth Credentials for accessing Twitter */\ndef configureTwitterCredentials(apiKey: String, apiSecret: String, accessToken: String, accessTokenSecret: String) {\n  val configs \u003d new HashMap[String, String] ++\u003d Seq(\n    \"apiKey\" -\u003e apiKey, \"apiSecret\" -\u003e apiSecret, \"accessToken\" -\u003e accessToken, \"accessTokenSecret\" -\u003e accessTokenSecret)\n  println(\"Configuring Twitter OAuth\")\n  configs.foreach{ case(key, value) \u003d\u003e\n    if (value.trim.isEmpty) {\n      throw new Exception(\"Error setting authentication - value for \" + key + \" not set\")\n    }\n    val fullKey \u003d \"twitter4j.oauth.\" + key.replace(\"api\", \"consumer\")\n    System.setProperty(fullKey, value.trim)\n    println(\"\\tProperty \" + fullKey + \" set as [\" + value.trim + \"]\")\n  }\n  println()\n}\n\n// Configure Twitter credentials\nval apiKey \u003d \"XS6avItQydeFJVUOoOgUks2xs\"\nval apiSecret \u003d \"fbykwJnyDCd2qigOMiUaqsBDbDhNw3FvSjKHW0jiWklOdDITfi\"\nval accessToken \u003d \"969949049746087941-n6SUV6nw9ngbteCIKP7nZATNtiN3Ioc\"\nval accessTokenSecret \u003d \"R2zDrkcns9njU0jadYAEEgVQ9bFt91AxSCSJ5PWDwkADA\"\nconfigureTwitterCredentials(apiKey, apiSecret, accessToken, accessTokenSecret)\n\nimport org.apache.spark.streaming.twitter._\nval ssc \u003d new StreamingContext(sc, Seconds(2))\nval tweets \u003d TwitterUtils.createStream(ssc, None)\nval twt \u003d tweets.window(Seconds(60))\n\ncase class Tweet(createdAt:Long, text:String)\ntwt.map(status\u003d\u003e\n  Tweet(status.getCreatedAt().getTime()/1000, status.getText())\n).foreachRDD(rdd\u003d\u003e\n  // Below line works only in spark 1.3.0.\n  // For spark 1.1.x and spark 1.2.x,\n  // use rdd.registerTempTable(\"tweets\") instead.\n  rdd.toDF().registerAsTable(\"tweets\")\n)\n\ntwt.print\n\nssc.start()",
      "user": "anonymous",
      "dateUpdated": "2020-02-20 11:17:04.859",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u003cconsole\u003e:14: error: object twitter is not a member of package org.apache.spark.streaming\n       import org.apache.spark.streaming.twitter._\n                                         ^\n\u003cconsole\u003e:46: error: object twitter is not a member of package org.apache.spark.streaming\n       import org.apache.spark.streaming.twitter._\n                                         ^\n\u003cconsole\u003e:48: error: not found: value TwitterUtils\n       val tweets \u003d TwitterUtils.createStream(ssc, None)\n                    ^\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1582196105771_-1330074501",
      "id": "20200220-105505_389383506",
      "dateCreated": "2020-02-20 10:55:05.771",
      "dateStarted": "2020-02-20 11:17:04.865",
      "dateFinished": "2020-02-20 11:17:05.197",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "user": "anonymous",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1582197424859_-545055796",
      "id": "20200220-111704_1838564778",
      "dateCreated": "2020-02-20 11:17:04.859",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "demo/twitter_stream",
  "id": "2F38M4PB9",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "md:shared_process": [],
    "producer:shared_process": [],
    "sh:shared_process": [],
    "spark:shared_process": [],
    "consumer:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}